帧缓冲
写入颜色值的颜色缓冲、用于写入深度信息的深度缓冲和允许我们根据一些条件丢弃特定片段的模板缓冲。
这些缓冲结合起来叫做帧缓冲(Framebuffer)，它被储存在内存中。
OpenGL允许我们定义我们自己的帧缓冲，也就是说我们能够定义我们自己的颜色缓冲，甚至是深度缓冲和模板缓冲。

unsigned int fbo;
glGenFramebuffers(1, &fbo);
//创建一个帧缓冲

glBindFramebuffer(GL_FRAMEBUFFER, fbo);
//绑定激活的(Active)帧缓冲
参数1:
GL_FRAMEBUFFER			读取和写入帧缓冲
GL_READ_FRAMEBUFFER		读取帧缓冲
GL_DRAW_FRAMEBUFFER		写入帧缓冲

一个完整的帧缓冲需要满足以下的条件：
1.附加至少一个缓冲（颜色、深度或模板缓冲）。
2.至少有一个颜色附件(Attachment)。
3.所有的附件都必须是完整的（保留了内存）。
4.每个缓冲都应该有相同的样本数。（之后的抗锯齿教程）

glCheckFramebufferStatus(GL_FRAMEBUFFER) 
//检测当前绑定的帧缓冲
返回值
GL_FRAMEBUFFER_COMPLETE							完整帧
GL_FRAMEBUFFER_UNDEFINED						默认的帧不存在
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT			没有附加至少一个缓冲
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT    没有附加至少一个图像
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER			没有附加至少一个颜色
GL_INVALID_ENUM									帧不是可读或者可写的

glDeleteFramebuffers(1, &fbo);
//删除帧缓冲对象

-----------------------------------------纹理附件-----------------------------------------
//需要从缓冲中采样颜色或深度值等数据，那么你应该选择纹理附件
unsigned int texture;
glGenTextures(1, &texture);
glBindTexture(GL_TEXTURE_2D, texture);

glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 800, 600, 0, GL_RGB, GL_UNSIGNED_BYTE, NULL);
//设置为了屏幕大小（尽管这不是必须的）
//给纹理的data参数传递了NULL（仅仅分配了内存而没有填充它）

glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
//不关心环绕方式或多级渐远纹理

glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, texture, 0);
//附加到帧缓冲
参数1:	帧缓冲的目标（绘制、读取或者两者皆有）
参数2:	附件类型
GL_COLOR_ATTACHMENT0			颜色附件(最后的0意味着我们可以附加多个颜色附件)
GL_DEPTH_ATTACHMENT				深度缓冲
GL_STENCIL_ATTACHMENT			模板缓冲
GL_DEPTH_STENCIL_ATTACHMENT		将深度和模板缓冲附加为一个纹理(32位数值将包含24位的深度信息和8位的模板信息)
参数3:  附加的纹理类型
GL_TEXTURE_2D					颜色格式	（和GL_COLOR_ATTACHMENT0、GL_DEPTH_STENCIL_ATTACHMENT对应）
GL_DEPTH_COMPONENT				深度缓冲格式（和GL_DEPTH_ATTACHMENT对应）
GL_STENCIL_INDEX				模板缓冲格式（和GL_STENCIL_ATTACHMENT对应）
参数4:	附加的纹理本身的id
参数5:	多级渐远纹理的级别。我们将它保留为0

-----------------------------------------渲染缓冲对象附件-----------------------------------------
是一个真正的缓冲，即一系列的字节、整数、像素等
好处是，它会将数据储存为OpenGL原生的渲染格式，它是为离屏渲染到帧缓冲优化过的
glReadPixels读取它返回特定区域的像素
当我们不需要从这些缓冲中采样的时候，通常都会选择渲染缓冲对象

unsigned int rbo;
glGenRenderbuffers(1, &rbo);
//创建一个渲染缓冲对象

glBindRenderbuffer(GL_RENDERBUFFER, rbo);
//绑定渲染缓冲对象

glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH24_STENCIL8, 800, 600);
//创建一个深度和模板渲染缓冲对象

glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_RENDERBUFFER, rbo);
//附加这个渲染缓冲对象

-----------------------------------------渲染到纹理-----------------------------------------
要想绘制场景到一个纹理上，我们需要采取以下的步骤
1.将新的帧缓冲绑定为激活的帧缓冲，和往常一样渲染场景
2.绑定默认的帧缓冲
3.绘制一个横跨整个屏幕的四边形，将帧缓冲的颜色缓冲作为它的纹理

-----------------------------------------后期处理-----------------------------------------
既然整个场景都被渲染到了一个纹理上，我们可以简单地通过修改纹理数据创建出一些非常有意思的效果
在一个纹理图像上做后期处理的另外一个好处是，我们可以从纹理的其它地方采样颜色值。

***************反相
通过帧缓冲我们能够访问渲染输出的每个颜色，所以在（译注：屏幕的）片段着色器中返回这些颜色的反相(Inversion)并不是很难。
我们将会从屏幕纹理中取颜色值，然后用1.0减去它，对它进行反相：
void main()
{
    FragColor = vec4(vec3(1.0 - texture(screenTexture, TexCoords)), 1.0);
}

***************灰度
移除场景中除了黑白灰以外所有的颜色，让整个图像灰度化(Grayscale)。
很简单的实现方式是，取所有的颜色分量，将它们平均化：
void main()
{
    FragColor = texture(screenTexture, TexCoords);
    float average = (FragColor.r + FragColor.g + FragColor.b) / 3.0;
    FragColor = vec4(average, average, average, 1.0);
}

为了获取物理上更精确的效果，我们需要使用加权的(Weighted)通道：
void main()
{
    FragColor = texture(screenTexture, TexCoords);
    float average = 0.2126 * FragColor.r + 0.7152 * FragColor.g + 0.0722 * FragColor.b;
    FragColor = vec4(average, average, average, 1.0);
}

***************核效果
核(Kernel)（或卷积矩阵(Convolution Matrix)）是一个类矩阵的数值数组，它的中心为当前的像素，它会用它的核值乘以周围的像素值，并将结果相加变成一个值。
。下面是核的一个例子：
	[2	2	2
	2  -15 2
	2	2	2]
这个核取了8个周围像素值，将它们乘以2，而把当前的像素乘以-15。这个核的例子将周围的像素乘上了一个权重，并将当前像素乘以一个比较大的负权重来平衡结果。
你在网上找到的大部分核将所有的权重加起来之后都应该会等于1，如果它们加起来不等于1，这就意味着最终的纹理颜色将会比原纹理值更亮或者更暗了。
const float offset = 1.0 / 300.0;
const int num = 9;
void main()
{
    //我们首先为周围的纹理坐标创建了一个9个vec2偏移量的数组
    vec2 offsets[num] = vec2[](
            vec2(-offset,  offset), // 左上
            vec2( 0.0f,    offset), // 正上
            vec2( offset,  offset), // 右上
            vec2(-offset,  0.0f),   // 左
            vec2( 0.0f,    0.0f),   // 中
            vec2( offset,  0.0f),   // 右
            vec2(-offset, -offset), // 左下
            vec2( 0.0f,   -offset), // 正下
            vec2( offset, -offset)  // 右下
            );
    //定义一个核，这是一个锐化(Sharpen)核，它会锐化周围的所有像素颜色值，
    //其中的数字加起来为1
    float kernel[num] = float[](
         -1, -1, -1,
         -1,  9, -1,
         -1, -1, -1
     );
    //将每个偏移量加到当前纹理坐标上，获取需要采样的纹理，采样周围的所有像素
    vec3 sampleTex[9];
    for(int i = 0; i < num; i++)
    {
        sampleTex[i] = vec3(texture(screenTexture,TexCoords.st+offsets[i]));
    }

    //纹理值乘以加权的核值
    vec3 col = vec3(0.0);
    for(int i = 0; i < num; i++)
        col += sampleTex[i] * kernel[i];
    FragColor = vec4(col, 1.0);
}

//你的玩家打了麻醉剂所感受到的效果

***************模糊
创建模糊(Blur)效果的核是这样的：
[1 2 1
 2 4 2
 1 2 1]/16
由于所有值的和是16，所以直接返回合并的采样颜色将产生非常亮的颜色，所以我们需要将核的每个值都除以16
最终的核数组将会是：
float kernel[9] = float[](
    1.0 / 16, 2.0 / 16, 1.0 / 16,
    2.0 / 16, 4.0 / 16, 2.0 / 16,
    1.0 / 16, 2.0 / 16, 1.0 / 16  
);

//创造出玩家醉酒时的效果，或者在主角没带眼镜的时候增加模糊。

***************边缘检测
边缘检测(Edge-detection)核和锐化核非常相似
[1  1  1
 1 -8  1
 1  1  1]
这个核高亮了所有的边缘，而暗化了其它部分，在我们只关心图像的边角的时候是非常有用的


//在核效果下环绕方式要设置为GL_CLAMP_TO_EDGE
/*
 * 原因:
 * 核在对屏幕纹理的边缘进行采样的时候，由于还会对中心像素周围的8个像素进行采样，其实会取到纹理之外的像素
 * 由于环绕方式默认是GL_REPEAT，所以在没有设置的情况下取到的是屏幕另一边的像素，而另一边的像素本不应该对中心像素产生影响，
 * 这就可能会在屏幕边缘产生很奇怪的条纹。
 * 为了消除这一问题，我们可以将屏幕纹理的环绕方式都设置为GL_CLAMP_TO_EDGE。
 * 这样子在取到纹理外的像素时，就能够重复边缘的像素来更精确地估计最终的值了。
*/
 
//依赖文件
//file:///./依赖文件.txt
//包含的头文件
#include "monster_generated.h"

using namespace MyGame::Sample;

//先构造1024大小的缓冲，如果不够会自动增长
flatbuffers::FlatBufferBuilder builder(1024);

//创建字符串
auto weapon_one_name = builder.CreateString("Sword");
short weapon_one_damage = 3;

auto weapon_two_name = builder.CreateString("Axe");
short weapon_two_damage = 5;

//创建模式文件的表格类型
auto sword = CreateWeapon(builder, weapon_one_name, weapon_one_damage);
auto axe = CreateWeapon(builder, weapon_two_name, weapon_two_damage);

auto name = builder.CreateString("Orc");

//创建数组
unsigned char treasure[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
auto inventory = builder.CreateVector(treasure, 10);

//创建Vector
std::vector<flatbuffers::Offset<Weapon>> weapons_vector;
weapons_vector.push_back(sword);
weapons_vector.push_back(axe);
auto weapons = builder.CreateVector(weapons_vector);

//创建结构体数组
Vec3 points[] = { Vec3(1.0f, 2.0f, 3.0f), Vec3(4.0f, 5.0f, 6.0f) };
auto path = builder.CreateVectorOfStructs(points, 2);

//创建点的结构体
auto position = Vec3(1.0f, 2.0f, 3.0f);

// Set his hit points to 300 and his mana to 150.
int hp = 300;
int mana = 150;

//第一种方法
//    auto orc = CreateMonster(builder, &position, mana, hp, name, inventory,
//                            Color_Red, weapons, Equipment_Weapon, axe.Union(),
//                            path);

//第二种方法
MonsterBuilder monster_builder(builder);
monster_builder.add_pos(&position);
monster_builder.add_hp(hp);
monster_builder.add_name(name);
monster_builder.add_inventory(inventory);
monster_builder.add_color(Color_Red);
monster_builder.add_weapons(weapons);
monster_builder.add_equipped_type(Equipment_Weapon);
monster_builder.add_equipped(axe.Union());
auto orc = monster_builder.Finish();
builder.Finish(orc);//必须的

//获取二进制,必须在Finish之后
uint8_t *buf = builder.GetBufferPointer();
int size = builder.GetSize();
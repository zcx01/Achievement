------------------------------右值引用 (file:///./../code/right_value.cpp)
左值
赋值符号左边的值，左值是表达式（不一定是赋值表达式）后依然存在的持久对象。

右值
右边的值，是指表达式结束后就不再存在的临时对象。

纯右值
纯粹的右值，要么是纯粹的字面量
例如 1+2。非引用返回的临时变量、运算表达式产生的临时变量、 原始字面量、Lambda 表达式都属于纯右值
需要注意的是，字符串字面量只有在类中才是右值，当其位于普通函数中是左值

将亡值
即将被销毁、却能够被移动的值

右值引用( T && )
让这个临时值的生命周期得以延长、只要变量还活着，那么将亡值将继续存活。

std::move 
这个方法将左值参数无条件的转换为右值

------------------------------移动语义 (file:///./../code/move.cpp)
std::move : 免了无意义的拷贝构造，加强了性能

std::forward : 来进行参数的转发（传递） 保持原来的参数类型（左引用保持左引用，右引用保持右引用）
std::forward<T>(v) T(类型) v(对象)
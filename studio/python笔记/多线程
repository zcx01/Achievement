------------------------------创建线程---------------------------------
print('主线程执行代码') 

# 从 threading 库中导入Thread类
from threading import Thread
from time import sleep

# 定义一个函数，作为新线程执行的入口函数
def threadFunc(arg1,arg2):
    print('子线程 开始')
    print(f'线程函数参数是：{arg1}, {arg2}')
    sleep(5)
    print('子线程 结束')


# 创建 Thread 类的实例对象， 并且指定新线程的入口函数
thread = Thread(target=threadFunc,
                args=('参数1', '参数2')
                )

# 执行start 方法，就会创建新线程，
# 并且新线程会去执行入口函数里面的代码。
# 这时候 这个进程 有两个线程了。
thread.start()

# 主线程的代码执行 子线程对象的join方法，
# 就会等待子线程结束，才继续执行下面的代码
thread.join()
print('主线程结束')


------------------------------锁---------------------------------
from threading import Lock
bankLock = Lock()

#操作共享数据前，申请获取锁
bankLock.acquire() 

# 操作完共享数据后，申请释放锁
bankLock.release()

------------------------------daemon---------------------------------
Python程序中当所有的 `非daemon线程` 结束了，整个程序才会结束
thread = Thread(target=threadFunc,
                daemon=True # 设置新线程为daemon线程
                )

------------------------------使用多个CPU核，用Python的多进程库---------------------------------
from multiprocessing import Process
Process用法和 Thread类似

获取多个进程的数据使用Manage
from multiprocessing import Manage 

 # 创建 类似字典的 跨进程 共享对象
manager = Manager()
return_dict = manager.dict()


